% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{set_parentdir}
\alias{set_parentdir}
\title{Set Parent Directory Based on System Information}
\usage{
set_parentdir(
  nodename_A = NULL,
  login_A = NULL,
  dir_A = NULL,
  nodename_B = NULL,
  login_B = NULL,
  dir_B = NULL,
  nodename_C = NULL,
  login_C = NULL,
  dir_C = NULL
)
}
\arguments{
\item{nodename_A}{Character. Node name of the first system. Must be provided.}

\item{login_A}{Character. Login name of the first system. Must be provided.}

\item{dir_A}{Character. Directory path for the first system. Must be provided.}

\item{nodename_B}{Character. Node name of the second system. Must be provided.}

\item{login_B}{Character. Login name of the second system. Must be provided.}

\item{dir_B}{Character. Directory path for the second system. Must be provided.}

\item{nodename_C}{Character. Node name of the third system. Optional.}

\item{login_C}{Character. Login name of the third system. Optional.}

\item{dir_C}{Character. Directory path for the third system. Optional.}
}
\value{
A character string representing the parent directory.
If no match is found, returns the current working directory.
If the specified directory does not exist, an error is thrown.
}
\description{
This function sets the parent directory based on the system's node name and login information.
It takes specifications for up to three different systems and matches the current system's
information to set the appropriate directory. If no match is found, it sets the directory to
the current working directory.
}
\examples{
\dontrun{
set_parentdir(nodename_A = "node1", login_A = "user1", dir_A = "/path/to/dir1",
              nodename_B = "node2", login_B = "user2", dir_B = "/path/to/dir2")

set_parentdir(nodename_A = "node1", login_A = "user1", dir_A = "/path/to/dir1",
              nodename_B = "node2", login_B = "user2", dir_B = "/path/to/dir2",
              nodename_C = "node3", login_C = "user3", dir_C = "/path/to/dir3")
}

}
